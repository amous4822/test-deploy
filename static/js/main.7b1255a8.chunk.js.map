{"version":3,"sources":["components/Home.js","components/Login.js","components/Register.js","Routing/AppliesRoutes.js","components/Posts.js","components/Input.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","Component","Login","addEmail","e","preventDefault","email","target","elements","exampleInputEmail1","value","password","exampleInputPassword1","console","log","firebase","signInWithEmailAndPassword","then","_this","props","userHasAuthenticated","catch","alert","message","renderRedirect","isAuthenticated","react_router","to","pathname","this","onSubmit","htmlFor","type","id","placeholder","React","Register","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","registerMail","_ref","asyncToGenerator","regenerator_default","mark","_callee","groupCode","userName","postRef","wrap","_context","prev","next","InputEmail1","InputPassword1","setState","ref","child","once","snap","val","users","forEach","childSnap","push","includes","createUser","stop","_x","apply","arguments","_ref2","_callee2","username","_context2","createUserWithEmailAndPassword","signOut","currentUser","updateProfile","displayName","set","redirect","_x2","_x3","_x4","_x5","_x6","state","inherits","createClass","key","AppliesRoutes","C","component","cProps","rest","objectWithoutProperties","assign","render","Posts","allPosts","map","post","index","Input","setGroupCode","user","split","on","posts","unsubscribe","handlePostInput","newPost","concat","toConsumableArray","onAuthStateChanged","components_Posts","name","Routes","authProps","path","exact","App","authenticated","handleLogout","react_router_dom","Fragment","onClick","href","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b1255a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <div className=\"lander\">\n          <h1>DissRant</h1>\n          <p>A place to rant in groups</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react'\nimport * as firebase from 'firebase'\nimport {Redirect} from 'react-router-dom'\n\n\nexport default class Login extends React.Component {\n\n    addEmail= (e) => {\n\n        e.preventDefault()\n        const email = e.target.elements.exampleInputEmail1.value;\n        const password = e.target.elements.exampleInputPassword1.value;\n        console.log(email, password)\n\n        const auth = firebase.auth()\n        auth.signInWithEmailAndPassword(email,password)\n            .then( () => {\n                this.props.userHasAuthenticated(true)\n            })\n            .catch(e => {alert(e.message)})\n    }\n\n    renderRedirect = () => {\n\n        if (this.props.isAuthenticated) {\n            \n          return <Redirect to = {{\n                pathname: '/messaging',\n            }} \n            />\n        }\n      }\n\n    render(){\n        return (\n            \n            <div className=\"card\">\n\n                {this.renderRedirect()}\n                <form onSubmit = {this.addEmail}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleInputEmail1\"><strong>Email</strong></label>\n                        <input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Enter email\"/>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleInputPassword1\"><strong>Password</strong></label>\n                        <input type=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\"/>\n                    </div>                    \n                    <button type=\"submit\" className=\"subbtn btn btn-outline-dark btn-block \">Login</button>\n                </form>\n            </div>\n            \n        )\n    }\n}","import React, { Component } from 'react'\nimport * as firebase from \"firebase\";\nimport {Redirect} from 'react-router-dom'\n\nexport class Register extends Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      redirect:false,\n      groupCode:'',\n    }\n  }\n\n  registerMail= async (e) => {\n    e.preventDefault()\n    const email = e.target.elements.InputEmail1.value;\n    const password = e.target.elements.InputPassword1.value;\n    const groupCode = e.target.elements.groupCode.value;\n    const userName = e.target.elements.userName.value;\n    this.setState({\n      groupCode:groupCode\n    })\n\n    const postRef = firebase.database().ref().child('rooms/' + groupCode + \"/members\")\n        \n    postRef.once(\"value\").then((snap) => {\n\n      if(snap.val() != null){\n        let users=[]\n        snap.forEach(childSnap => {\n          users.push(childSnap.val())\n        })\n\n        if(users.includes(userName)){\n          alert(\"Another user with the same username is already present in the group\")\n        } else {\n          this.createUser(email, password, userName, postRef, groupCode)\n        }\n      } else {\n        this.createUser(email, password, userName, postRef,groupCode)\n      }\n\n    })\n  }\n\n  createUser = async (email, password , username, postRef, groupCode)=> {\n\n    await firebase.auth().createUserWithEmailAndPassword(email,password)\n      .catch(e => {\n        alert(e.message) \n        firebase.auth().signOut() \n    })\n\n    if(firebase.auth().currentUser != null){\n      \n      await firebase.auth().currentUser.updateProfile({\n        displayName : username+ \"~\" + groupCode,\n      })\n    \n      let newChild = postRef.push()\n      newChild.set(username)\n\n      this.setState({\n        redirect:true\n      })\n    }\n  }\n\n  renderRedirect = () => {\n\n    if (this.state.redirect) {\n      return <Redirect to={{\n        pathname: '/messaging',\n        state: { groupCode: this.state.groupCode }\n      }} />\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n\n      {this.renderRedirect()}\n\n      <div className=\"card shadow-lg\">\n        <form onSubmit = {this.registerMail}>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"InputEmail1\">Email address</label>\n            <input type=\"email\" className=\"form-control\" id=\"InputEmail1\" placeholder=\"Enter email\"/>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"userName\">User Name</label>\n            <input type=\"text\" className=\"form-control\" id=\"userName\" placeholder=\"User Name\"/>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"groupCode\">Group Code</label>\n            <input type=\"text\" className=\"form-control\" id=\"groupCode\" placeholder=\"Group Code\"/>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"InputPassword1\">Password</label>\n            <input type=\"password\" className=\"form-control\" id=\"InputPassword1\" placeholder=\"Password\"/>\n          </div>\n\n          <button className=\"btn btn-primary\">Register</button>\n        </form>\n\n      </div>\n          \n      </div>\n\n    )\n  }\n}\n\nexport default Register\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nexport default ({ component: C, props: cProps, ...rest }) =>\n  <Route {...rest} render = { props => < C {...props} {...cProps} />} />;\n","import React, { Component } from 'react'\n\nclass Posts extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.allPosts.map((post,index) =>{\n          return (\n            <div key={index} className=\"card post\">\n              {post}\n            </div>\n          )\n        })}\n      </div>\n      \n    )\n  }\n}\n\nexport default Posts\n","import React from 'react'\nimport Posts from './Posts'\nimport * as firebase from 'firebase'\n\n\n\nexport default class Input extends React.Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            groupCode: \"\",\n            username: \"\",\n            posts:[],\n        }\n\n        this.unsubscribe = firebase.auth().onAuthStateChanged((user) => this.setGroupCode(user))        \n    }\n\n    setGroupCode = (user) => {\n\n        if(user.displayName){\n        this.setState({\n            groupCode: user.displayName.split(\"~\")[1],\n            username: user.displayName.split(\"~\")[0],\n        })\n\n        const postRef = firebase.database().ref().child( 'rooms/' + this.state.groupCode + '/posts' )\n        postRef.on(\"value\", snap => {\n        let post=[]\n        snap.forEach(childSnap => {\n            post.push(childSnap.val())\n        })\n            this.setState({\n                posts : post\n            })\n        })\n        this.unsubscribe()\n    }\n    }\n\n\n    handlePostInput =(e)=> {\n\n        e.preventDefault()\n        const postRef = firebase.database().ref().child( 'rooms/' + this.state.groupCode + '/posts'  )\n        const newPost = this.state.username+\": \" + e.target.elements.newPost.value\n\n        let newChild = postRef.push()\n        newChild.set(newPost)\n        \n        const posts = [ ...this.state.posts, newPost ]\n\n        this.setState({\n            posts : posts\n        })\n\n        e.target.elements.newPost.value=\"\"\n    }\n\n    render (){\n        return (\n            <div>\n                \n                <Posts allPosts = {this.state.posts}/>\n                <div className= \"card shadow-lg\">\n                    <form onSubmit={this.handlePostInput}>\n\n                        <div className= \"form-group\">\n                            <label className=\"sr-only\" >Post Body</label>\n                            <textarea type=\"text\" name= \"newPost\"/>\n                        </div>\n\n                        <button className=\"subbtn mb-2 btn btn-primary\" type=\"submit\">Post</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\nimport AppliesRoutes from \"../Routing/AppliesRoutes\";\nimport Input from \"./Input\";\n\n\nexport default ({ authProps }) =>\n  <Switch>\n    <AppliesRoutes path=\"/\" exact component={Home} />\n    <AppliesRoutes props={authProps} path=\"/login\" exact component={Login} />\n    <AppliesRoutes props={authProps} path=\"/register\" exact component={Register} />\n    <AppliesRoutes path=\"/messaging\" exact component={Input} />\n    <Route /*component={NotFound}*/ />\n    \n\n  </Switch>;\n","import React, { Component } from 'react';\nimport {Link } from 'react-router-dom'\nimport Routes from './components/Routes'\nimport * as firebase from 'firebase'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      isAuthenticated : \"\",\n      \n    }\n\n    firebase.auth().onAuthStateChanged(user => {\n      if(user){\n        console.log(\"user:\" , user)\n        this.userHasAuthenticated(true)\n\n      } else {\n        console.log(\"not logged in\")\n        this.userHasAuthenticated(false)\n\n      }\n    })\n    \n  }\n\n  // async componentDidMount(){\n  //   var user = await firebase.auth().currentUser;\n\n  //   if (user) {\n  //     this.userHasAuthenticated(true);\n  //   } else {\n  //     this.setState({isAuthenticated:false})\n  //   }\n  // }\n\n  userHasAuthenticated = (authenticated) => {\n    this.setState ({\n      isAuthenticated : authenticated,\n      \n    })\n\n  }\n\n  handleLogout =() => {\n    firebase.auth().signOut() \n  }\n\n  render() {\n\n    const authProps = {\n      isAuthenticated: this.state.isAuthenticated,\n      userHasAuthenticated: this.userHasAuthenticated,\n    }\n\n    return (\n      <div>\n      <nav className=\"navbar navbar-expand-lg color-white\">\n        <Link className=\"navbar-brand\" to=\"/\">DissRant</Link>\n        <ul className=\"navbar-nav ml-auto\">\n        { \n          this.state.isAuthenticated ? \n\n            <React.Fragment>\n              <li onClick={this.handleLogout}><a href=\"/\">Logout</a></li>\n              <li><a href=\"/messaging\">Posts</a></li>\n            </React.Fragment> :\n\n            <React.Fragment>   \n              <li><a href=\"/login\">Login</a></li>    \n              <li><a href=\"/register\">Signup</a></li>\n            </React.Fragment>\n        }\n        </ul>\n      </nav>\n      <Routes authProps = {authProps}/>\n      </div>\n    )  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { HashRouter as Router } from \"react-router-dom\";\nimport './App.css';\nimport App from './App';\nimport * as firebase from 'firebase'\nimport * as serviceWorker from './serviceWorker';\n\nconst config = {\n    apiKey: \"AIzaSyDA1TNXkaL3XXjiuCf7fOxamYqR4XVfg7o\",\n    authDomain: \"dissrant-fc0c9.firebaseapp.com\",\n    databaseURL: \"https://dissrant-fc0c9.firebaseio.com\",\n    projectId: \"dissrant-fc0c9\",\n    storageBucket: \"\",\n    messagingSenderId: \"1004262125748\"\n};\n\nfirebase.initializeApp(config);\n\n// firebase.auth().onAuthStateChanged(user => {\n//     if(user){\n//         console.log(\"user active:\", user)\n//         //firebase.auth().signOut()\n//     } else {\n//         console.log(\"user active: not logged in\")\n//     }\n// })\n\nReactDOM.render(\n    <Router>\n        <App/>\n    </Router>\n, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}